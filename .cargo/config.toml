
# [alias]
# esp32c3 = "run --features esp32c3 --target riscv32imc-unknown-none-elf  --features esp32c3-hal/default,esp32c3-hal/embassy-time-timg0,esp32c3-hal/embassy-executor-thread"

[target.riscv32imc-unknown-none-elf]
runner = "espflash.exe flash --monitor"
#espflash --monitor \target\riscv32imc-unknown-none-elf\release\rs-esp32c3-no-std-st7789-demo
rustflags = [
  "-C", "link-arg=-Tlinkall.x",
  # Required to obtain backtraces (e.g. when using the "esp-backtrace" crate.)
  # NOTE: May negatively impact performance of produced code
  "-C", "force-frame-pointers",

  "-C", "link-arg=-Trom_functions.x",

#   # # comment the cfgs below if you do _not_ wish to emulate atomics.
#   # # enable the atomic codegen option for RISCV
#   "-C", "target-feature=+a",
#   # # tell the core library have atomics even though it's not specified in the target definition.
#   # # NOTE: This is fine for load/store, but we don't support compare-and-swap, so we don't get
#   # # full atomic features. For that, atomic_polyfill or the atomic trap handler should be used
#   # # instead. But we don't need CAS in the firmware.
#  "--cfg", "target_has_atomic_load_store",
  "--cfg", "esp32c3"
]

# for testing: you can specify this target to see atomic emulation in action
[target.riscv32imac-unknown-none-elf]
runner = "espflash --monitor"
rustflags = [
  "-C", "link-arg=-Tlinkall.x",
   # Required to obtain backtraces (e.g. when using the "esp-backtrace" crate.)
  # NOTE: May negatively impact performance of produced code
  "-C", "force-frame-pointers",

  "-C", "link-arg=-Trom_functions.x",

  # # comment the cfgs below if you do _not_ wish to emulate atomics.
  # # enable the atomic codegen option for RISCV
  "-C", "target-feature=+a",
  # # tell the core library have atomics even though it's not specified in the target definition.
  # # NOTE: This is fine for load/store, but we don't support compare-and-swap, so we don't get
  # # full atomic features. For that, atomic_polyfill or the atomic trap handler should be used
  # # instead. But we don't need CAS in the firmware.
 "--cfg", "target_has_atomic_load_store",
  "--cfg", "esp32c3"
]

[build]
target = "riscv32imc-unknown-none-elf"

[unstable]
build-std = [ "core" ]
